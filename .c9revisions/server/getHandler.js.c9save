{"ts":1347499986185,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var fs = require('fs');\r\nvar mime = require('mime');\r\nvar error = require('./error.js');\r\n\r\nexports.handleRequest = function(req, res, options, relativePath, query, url) {\r\n    console.log('relativePath: ' + relativePath);\r\n\tif(url === 'favicon.ico') {\r\n\t\tres.end(); // if the browser requests favicon, just return an empty response\r\n\t} else {\r\n\t\tfs.stat(relativePath, function(err, stats) { // determine if the resource is a file or directory\r\n\t\t\tif(err) { error.write(res, err); } \r\n\t\t\telse {\r\n\t\t\t\tif(stats.isDirectory()) {\r\n\t\t\t\t\tres.setHeader('Last-Modified', stats.mtime);\t\t\t\t\t\t\t\r\n\t\t\t\t\t// if it's a directory, return the files as a JSONified array\r\n\t\t\t\t\tconsole.log('reading directory ' + relativePath);\r\n\t\t\t\t\tfs.readdir(relativePath, function(err, files) {\r\n\t\t\t\t\t\tif(err) { \r\n\t\t\t\t\t\t\tconsole.log('writeError');\r\n\t\t\t\t\t\t\terror.write(res, err); \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tvar results = [];\r\n\t\t\t\t\t\t\tvar search = {};\r\n\t\t\t\t\t\t\tsearch.stats = function(files) {\r\n\t\t\t\t\t\t\t\tif(files.length) { \r\n\t\t\t\t\t\t\t\t\tvar file = files.shift();\r\n\t\t\t\t\t\t\t\t\tfs.stat(relativePath + '/' + file, function(err, stats) { \r\n\t\t\t\t\t\t\t\t\t\tif(err) { error.write(res, err); } \r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tstats.name = file;\r\n\t\t\t\t\t\t\t\t\t\t\tstats.isFile = stats.isFile();\r\n\t\t\t\t\t\t\t\t\t\t\tstats.isDirectory = stats.isDirectory();\r\n\t\t\t\t\t\t\t\t\t\t\tstats.isBlockDevice = stats.isBlockDevice();\r\n\t\t\t\t\t\t\t\t\t\t\tstats.isFIFO = stats.isFIFO();\r\n\t\t\t\t\t\t\t\t\t\t\tstats.isSocket = stats.isSocket();\r\n\t\t\t\t\t\t\t\t\t\t\tresults.push(stats);\r\n\t\t\t\t\t\t\t\t\t\t\tsearch.stats(files);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tif(query.dir == 'json') {\r\n\t\t\t\t\t\t\t\t\t\tres.setHeader('Content-Type', 'application/json');\r\n\t\t\t\t\t\t\t\t\t\tres.write(JSON.stringify(results)); \r\n\t\t\t\t\t\t\t\t\t\tres.end();\r\n\t\t\t\t\t\t\t\t\t} else { \r\n\t\t\t\t\t\t\t\t\t\tres.setHeader('Content-Type', 'text/html');\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tres.write('<html><body>');\r\n\t\t\t\t\t\t\t\t\t\tfor(var f = 0; f < results.length; f++) {\r\n\t\t\t\t\t\t\t\t\t\t\tvar name = results[f].name;\r\n\t\t\t\t\t\t\t\t\t\t\tvar normalized = url + '/' + name;\r\n\t\t\t\t\t\t\t\t\t\t\twhile(normalized[0] == '/') { normalized = normalized.slice(1, normalized.length); }\r\n\t\t\t\t\t\t\t\t\t\t\tres.write('\\r\\n<p><a href=\"/' + normalized + '\">' + name + '</a></p>');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tres.end('\\r\\n</body></html>');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tsearch.stats(files);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// if it's a file, return the contents of a file with the correct content type\r\n\t\t\t\t\tconsole.log('reading file ' + relativePath);\r\n                    var type;\r\n\t\t\t\t\tif(query.type == 'json' || query.dir == 'json') {\r\n\t\t\t\t\t\ttype = 'application/json';\r\n\t\t\t\t\t\tres.setHeader('Content-Type', type);\r\n\t\t\t\t\t\tfs.readFile(relativePath, function(err, data) { \r\n\t\t\t\t\t\t\tif(err) { error.write(res, err); }\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tres.end(JSON.stringify({ \r\n\t\t\t\t\t\t\t\t\tdata: data.toString(),\r\n\t\t\t\t\t\t\t\t\ttype: mime.lookup(relativePath)\r\n\t\t\t\t\t\t\t\t})); \r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttype = mime.lookup(relativePath);\r\n\t\t\t\t\t\tres.setHeader('Content-Type', type);\r\n\t\t\t\t\t\tfs.readFile(relativePath, function(err, data) { \r\n\t\t\t\t\t\t\tif(err) { error.write(res, err); }\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tres.setHeader('Content-Length', data.length);\r\n\t\t\t\t\t\t\t\tres.end(data); \r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n};"]],"start1":0,"start2":0,"length1":0,"length2":3236}]],"length":3236}
